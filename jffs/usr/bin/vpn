#!/bin/sh

########################################################################
#                                                                      #
#   VPN connector script v11.02                                        #
#   (c) by Tobse (cthullu@protonmail.com) in 2022                      #
#                                                                      #
#   This script must be located on a USB stick, mounted on /jffs and   #
#   expects the presence of the speed check script in /jffs/usr/bin/.  #
#   All scripts must be "chmod ugo+x" in order to be executable.       #
#                                                                      #
########################################################################

echo
echo Connection script invoked.

# load config
DIRNAME="$( cd "$( dirname "$0" )" && pwd )"
source $DIRNAME/config
if [ -f "$DIRNAME/myconfig" ]; then
  echo -e "\033[1;36mApplying personal config override.\033[0m"
  source $DIRNAME/myconfig
fi

SERVERSLISTFILE=$JFFSPATH/servers.list
OVPNFILESURL=https://nordvpn.com/de/ovpn/

# exit if there's another instance of this script running
VPNPROCESSES=$(ps | awk "/\/bin\/vpn/" | grep -v grep | grep -o "^[0-9]\+")
CNT=0
for VPNPROCESS in $VPNPROCESSES ; do
  let CNT=$CNT+1
done
COMPARISON=`echo | awk -v op=0$CNT '{if (op>2) printf ("greater"); else printf ("smaller");}'`
if [ "$COMPARISON" == "greater" ]; then
  echo -e "\033[1;31mAnother instance of the vpn script is running"
  echo -e "\033[1;31mUse the killvpn command to kill this instance and retry after that or simply wait for the $MUSTWAIT seconds.\033[0m"
  exit 1
fi

# exit if there's an instance of the speed check script running
SPPROCESSES=$(ps | awk "/\/bin\/speedcheck/" | grep -v grep | grep -o "^[0-9]\+")
CNT=0
for SPPROCESS in $SPPROCESSES ; do
  let CNT=$CNT+1
done
COMPARISON=`echo | awk -v op=0$CNT '{if (op>2) printf ("greater"); else printf ("smaller");}'`
if [ "$COMPARISON" == "greater" ]; then
  echo -e "\033[1;31mAn instance of the speed check script is running"
  echo -e "\033[1;31mUse the killvpn command to kill this instance and retry after that or simply wait for the $MUSTWAIT seconds.\033[0m"
  exit 1
fi

# check if system supports curl command
CURLSUPPORTED=yes
RESULT=`command -v curl`
if [ "$RESULT" == "" ]; then
  CURLSUPPORTED=no
fi

# check if country specified by parameter 1 is disallowed by configuation
EXCLUDECOUNTRIES=$(echo $IGNORECOUNTRIES | tr "," "\n")
INCLUDECOUNTRIES=$(echo $EXCLUSIVECOUNTRIES | tr "," "\n")
if [ ${#1} -eq 2 ]; then
  for i in $EXCLUDECOUNTRIES
  do
    if [ -z "${1##*$i*}" ]; then
      echo -e "\033[1;31mThe country \"$1\" is disallowed by configuration.\033[0m"
      if [ -f $VPNLOCKFILE ]; then
        rm -f $VPNLOCKFILE
      fi
      exit 1
    fi
  done
fi

# count amount of URLs for IP address lookup from config
AMT=0
IPADDRESSURLS=$(echo $IPADDRESSURLS | tr "," "\n")
for IPADDRESSURL in $IPADDRESSURLS ; do
  let AMT=$AMT+1
done

# generate a random number for an entry from the IP address lookop URLs
RND=`awk -v min=1 -v max=$AMT 'BEGIN{srand(); print int(min+rand()*(max-min+1))}'`

# now pick the according URL from the list of lookup servers
CNT=0
for IPADDRESSURL in $IPADDRESSURLS ; do
  let CNT=$CNT+1
  if [ $CNT -eq $RND ]; then
    IPADDRESSURL=http://$IPADDRESSURL
    OLDIP=`wget -t 3 -T 10 -q -O - $IPADDRESSURL`
    if [ $? -eq 0 ] || [ $CNT -gt $RND ]; then
      break
    fi
    echo -e "\033[1;31mIP address lookup failed.\033[0m"
  fi
done
echo "Public IP address lookup will be done via $IPADDRESSURL."

# remove servers list file if it is empty
if [ -f "$SERVERSLISTFILE" ]; then
  SERVERS=`cat $SERVERSLISTFILE`
  if [ "$SERVERS" == "" ]; then
    rm $SERVERSLISTFILE
  fi
fi

# update the NordVPN servers file if it is outdated
if [ ! -f "$SERVERSLISTFILE" ] || [ $(find "$SERVERSLISTFILE" -mtime +1 -print) ]; then

  # download OVPN files list from NordVPN
  if [ "$CURLSUPPORTED" == "yes" ]; then
    OVPNHTML=$(curl --connect-timeout 3 -ks $OVPNFILESURL)
  else
    OVPNHTML=`wget -t 3 -T 10 -q -O - $OVPNFILESURL`
  fi

  # parse OVPN list with PHP and write servers to file
  PHP=`echo $SERVERSLISTFILE@@@@@$OVPNHTML|php -nr '
    $params = explode("@@@@@", fgets(STDIN));
    $servers = array();
    preg_match_all("%href=\"([^\"]+?\.ovpn)%sim", $params[1], $urls);
    foreach ($urls[1] as $url) {
      preg_match("%/([^/\.]+?)\.nordvpn%", $url, $server);
      $servers[] = $server[1];
    }
    file_put_contents(trim($params[0]), implode("\n", $servers));
  '`

fi

# read servers from file
sort $SERVERSLISTFILE | uniq > $MYTMPDIR/servers.list
mv $MYTMPDIR/servers.list $SERVERSLISTFILE
SERVERS=`cat $SERVERSLISTFILE`
AMTSERVERS=0
for SERVER in $SERVERS ; do
  let AMTSERVERS=$AMTSERVERS+1
done
echo -e "\033[1;32mGot $AMTSERVERS potential servers to connect to.\033[0m"

# get command line parameter
PARAM1=`echo "$1" | awk '{print tolower($0)}'`

# check for empty parameter 1
if [ "$PARAM1" == "" ]; then
  echo -e "\033[1;31mNo parameter was given.\033[0m"
  echo Please use a two letter country shortcut or
  echo -e "a server as parameter from the following \033[1;37m$AMTSERVERS\033[0m items list:"
  echo
  CNT=0
  for SERVER in $SERVERS ; do
    echo -en "$SERVER\t"
    let CNT=$CNT+1
    if [ `expr $CNT % 10` -eq 0 ]; then
      echo
    fi
    if [ `expr $CNT % 150` -eq 0 ]; then
      read -n 1 -s
    fi
  done
  echo
  echo
  echo If you\'re not sure which one to pick, just use \"rnd\" or the two letters describing a country to pick a random server
  exit 1
fi

# filter servers by country if EXCLUSIVECOUNTRIES are specified
if [ "$EXCLUSIVECOUNTRIES" != "" ] && [ "$1" == "rnd" ]; then
  touch $MYTMPDIR/servers.tmp
  touch $MYTMPDIR/exservers.tmp
  for i in $INCLUDECOUNTRIES
  do
    EXSERVERS=`cat $SERVERSLISTFILE | grep -e "$i\d"`
    rm -f $MYTMPDIR/exservers.tmp
    for i in $EXSERVERS
    do
      echo $i >> $MYTMPDIR/exservers.tmp
    done
    cat $MYTMPDIR/exservers.tmp >> $MYTMPDIR/servers.tmp
  done
  SERVERS=`cat $MYTMPDIR/servers.tmp`
  AMTSERVERS=`echo $SERVERS | wc -w`
  echo -e "\033[1;37mConfiguration\033[0m narrowed down server list to \033[1;37m$AMTSERVERS\033[0m potential connection candidates."
  if [ $AMTSERVERS -lt 1 ]; then
    if [ -f $VPNLOCKFILE ]; then
      rm -f $VPNLOCKFILE
    fi
    exit 1
  fi
else
  SERVER=$1
fi

# filter servers by country if two characters were stated
if [ ${#1} -eq 2 ]; then
  SERVERS=`cat $SERVERSLISTFILE | grep -e "$1\d"`
  AMTSERVERS=`echo $SERVERS | wc -w`
  echo -e "\033[1;37mParameter \"$1\"\033[0m narrowed down server list to \033[1;37m$AMTSERVERS\033[0m potential connection candidates."
  if [ $AMTSERVERS -lt 1 ]; then
    if [ -f $VPNLOCKFILE ]; then
      rm -f $VPNLOCKFILE
    fi
    echo -e "\033[1;31mThese aren't the servers you are looking for.\033[0m"
    exit 1
  fi
else
  SERVER=$1
fi

# remove temporary files
rm -f $MYTMPDIR/servers.tmp
rm -f $MYTMPDIR/exservers.tmp

# download server loads if specified by config
if [ "$CHECKMAXLOAD" == "yes" ]; then

  # read NordVPN servers list (realtime data)
  SERVERSJSON=
  echo -n Retrieving server load percentages...
  if [ "$CURLSUPPORTED" == "yes" ]; then
    SERVERSJSON=$(curl --connect-timeout 3 -ks $SERVERLISTURL)
  else
    SERVERSJSON=`wget -t 3 -T 10 -q -O - $SERVERLISTURL`
  fi
fi

RETRIESDONE=0
while [ $RETRIESDONE -lt $MAXTRIES ]; do

  # if parameter 1 is "rnd" user wants a random server
  # read server configurations
  if [ "$1" == "rnd" ] || [ ${#1} -eq 2 ]; then

    # loop as long as server is in excluded countries list
    # and not in exclusive countries list
    echo
    echo -n Finding a server matching the given criteria...
    while : ; do
      echo -n .

      # initialize loop
      WRONGPROTOCOL=no
      WRONGCOUNTRY=no
      CORRECTCOUNTRY=yes
      LOADISOKAY=yes

      # generate random number
      # between 1 and amount of server configurations
      RND=`awk -v min=1 -v max=$AMTSERVERS 'BEGIN{srand(); print int(min+rand()*(max-min+1))}'`

      # now pick $RND from list
      CNT=0
      for SERVER in $SERVERS ; do
        let CNT=$CNT+1
        if [ $CNT -eq $RND ]; then
          PARAM1=$SERVER
          break
        fi
      done
      sleep 1

      # check if selected server is in a to be excluded country
      if [ "$WRONGPROTOCOL" == "no" ]; then
        for i in $EXCLUDECOUNTRIES
        do
          if [ -z "${PARAM1##*$i*}" ]; then
            WRONGCOUNTRY=yes
            break
          fi
        done

        # check if selected server is in an exclusive country
        if [ "$WRONGCOUNTRY" == "no" ]; then
          if [ "$1" == "rnd" ] && [ "$EXCLUSIVECOUNTRIES" != "" ]; then
            CORRECTCOUNTRY=no
            for i in $INCLUDECOUNTRIES
            do
              if [ -z "${PARAM1##*$i*}" ]; then
                CORRECTCOUNTRY=yes
                break
              fi
            done
          fi

          # parse NordVPN servers list with PHP
          # and find current exit node
          echo -n o
          SERVERINFO=
          if [ "$CHECKMAXLOAD" == "yes" ] && [ "$CORRECTCOUNTRY" == "yes" ] && [ "$SERVERSJSON" != "" ]; then
            TOPARSER="$SERVER|$SERVERSJSON"
            SERVERINFO=`echo $TOPARSER|php -nr '
              $input = explode("|", fgets(STDIN));
              $regex = "%^([a-z]+?)(\d+?)(tcp|udp)$%";
              $exitnode = preg_replace_callback($regex,
               function($hits) {
                 return $hits[1] . (int)$hits[2];
               }, $input[0]);
              if (!preg_match("%(.{0,303}\"hostname\"\:\"" . $exitnode . "\.nordvpn\.com\""
                            . ".+?\"version\"\:.+?\}\}\]\})%sm", $input[1], $hits)) {
                return;
              }
              $part = $hits[1];
              if (!preg_match("%\}\}\]\},(.+?\}\}\]\})%sm", $part, $hits)) {
                if (!preg_match("%^\[(.+?\}\}\]\})%sm", $part, $hits)) {
                  return;
                }
              }
              $server = json_decode($hits[1]);
              echo "Full name: " . $server->name . "\n"
                 . "Latitude: "  . $server->locations[0]->latitude . "\n"
                 . "Longitude: " . $server->locations[0]->longitude . "\n"
                 . "Load: "      . $server->load;
              '`
            SERVERLOAD=`echo $SERVERINFO | grep -E -o 'Load: ([0-9]+)'`
            SERVERLOAD=`echo $SERVERLOAD | grep -E -o '([0-9]+)'`
            if [ "$SERVERINFO" != "" ]; then
              COMPARISON=`echo | awk -v sl=0$SERVERLOAD -v ma=$MAXLOAD '{if (sl>ma) printf ("greater"); else printf ("smaller");}'`
              if [ "$COMPARISON" == "greater" ]; then
                LOADISOKAY=no
              fi
            else
              LOADISOKAY=no
            fi
          fi
        fi
      fi

      # remove current server from list with remaining servers
      if [ -f "$MYTMPDIR/filteredservers.tmp" ]; then
        rm $MYTMPDIR/filteredservers.tmp
      fi
      touch $MYTMPDIR/filteredservers.tmp
      for i in $SERVERS
      do
        echo $i >> $MYTMPDIR/filteredservers.tmp
      done
      SERVERS=`cat $MYTMPDIR/filteredservers.tmp | grep -v "$PARAM1"`
      AMTSERVERS=`echo $SERVERS | wc -w`
      if [ $AMTSERVERS -lt 1 ]; then
        if [ -f $VPNLOCKFILE ]; then
          rm -f $VPNLOCKFILE
        fi
        echo
        echo -e "\033[1;31mNo server matches the specified criteria. Try lowering restrictions in your configuration.\033[0m"
        exit 1
      fi
    [[ "$WRONGCOUNTRY" == "yes" || "$CORRECTCOUNTRY" == "no" || "$WRONGPROTOCOL" == "yes" || "$LOADISOKAY" == "no" ]] || break
    done
  fi

  # show server information to user
  echo
  if [ "$CHECKMAXLOAD" == "yes" ] && [ "$SERVERINFO" != "" ]; then
    echo -e "\033[1;32mServer $SERVER fulfills maximum load rule ($SERVERLOAD% <= $MAXLOAD%).\033[0m"
    echo "$SERVERINFO"
  fi

  # init
  AUTHFAILED="no"
  let TRYNUMBER=$RETRIESDONE+1
  echo
  echo -e "\033[1;37mThis is try #$TRYNUMBER of $MAXTRIES."
  echo -e "Connecting to server \033[1;37m$PARAM1\033[0m.\033[0m"
  echo
  while : ; do
    OLDIP=`wget -t 3 -T 10 -q -O - $IPADDRESSURL`
    if [ $? -eq 0 ]; then
      break
    fi
  done
  NEWIP=$OLDIP

  # check if we're connected to the VPN
  VPNROUTE=`route -n | grep $VPNINTERFACE`
  if [ "$VPNROUTE" == "" ]; then
    echo -e "\033[33mWe're not connected to the VPN yet.\033[0m"
  else

    # display current public IPv4
    if [ "$OLDIP" == "" ]; then
      echo -e "\033[1;31mCurrent public IPv4 couldn't be determined.\033[0m"
    else
      echo Current public IPv4 is $OLDIP
    fi

    # drop the VPN
    printf "Waiting for the VPN to drop."
    CNT=0
    while [ $CNT -le $DROPTIMEOUT ] && [ "$NEWIP" == "$OLDIP" ]
    do
      for pid in $(ps | grep openvpncl | grep -v grep | head -n 1 | awk '{print $1}'); do kill -9 $pid >/dev/null 2>/dev/null; done
      sleep 1
      let CNT=$CNT+1
      printf "."
      NEWIP=$OLDIP
      VPNROUTE=`route -n | grep $VPNINTERFACE`
      if [ "$VPNROUTE" == "" ]; then
        NEWIP=`wget -t 3 -T 10 -q -O - $IPADDRESSURL`
        if [ $? -ne 0 ]; then
          echo
          echo -e "\033[1;31mIP address lookup failed.\033[0m"
        fi
        break
      fi
    done
    echo
  fi

  # display current public IPv4
  if [ -z "${NEWIP// }" ]; then
    echo -e "\033[1;31mCurrent public IPv4 couldn't be determined.\033[0m"
  else
    echo Current public IPv4 is $NEWIP
  fi

  # download server configuration and restart VPN
  echo "Downloading configuration for server $SERVER."
  PROTOCOL=tcp
  PORT=443
  if [ "$FORCEPROTOCOL" != "" ]; then
    PROTOCOL=$FORCEPROTOCOL
  fi
  PROTOCOL=`echo "$PROTOCOL" | awk '{print tolower($0)}'`
  if [ "$PROTOCOL" == "udp" ]; then
    PORT=1194
  fi
  OVPNURL=https://downloads.nordcdn.com/configs/files/ovpn_legacy/servers/$PARAM1.nordvpn.com.$PROTOCOL$PORT.ovpn
  chmod og-r /tmp/openvpncl/*
  if [ "$CURLSUPPORTED" == "yes" ]; then
    curl -kso /tmp/openvpncl/openvpn.conf $OVPNURL
  else
    wget -q $OVPNURL -P /tmp/openvpncl -O openvpn.conf
  fi
  echo "Connecting to server $PARAM1 with $PROTOCOL at port $PORT."
  killall -q openvpn
  sleep 1
  OPENVPNLOG_OLD=
  LASTLOGLINE=
  if [ -f $VPNLOG ]; then
    LASTLOGLINE=`tail -n1 $VPNLOG`
  fi
  COMPRESSION=
  if [ "$COMPLZO" == "yes" ]; then
    COMPRESSION=--comp-lzo
  fi
  openvpn --config /tmp/openvpncl/openvpn.conf --auth-user-pass /tmp/openvpncl/credentials --route-up /tmp/openvpncl/route-up.sh --log $VPNLOG --daemon --auth-nocache --script-security 2 --dev $VPNINTERFACE $COMPRESSION

  # wait for new IPv4
  OLDIP=$NEWIP
  STARTSTAMP=`date +%s`
  RUNNINGPERIOD=0
  SLEEP=1
  echo "Waiting for the VPN to come up."
  echo
  echo OpenVPN connection log:
  while [ $RUNNINGPERIOD -le $CONNECTTIMEOUT ] && [ "$NEWIP" == "$OLDIP" ]
  do
    sleep $SLEEP
    OPENVPNLOG_NEW=
    if [ -f $VPNLOG ]; then
      OPENVPNLOG_NEW=`cat $VPNLOG`
      if [ "$OPENVPNLOG_NEW" != "$OPENVPNLOG_OLD" ]; then
        FOUNDLINE="no"
        while read LINE; do
          if [ "$LINE" == "$LASTLOGLINE" ]; then
            FOUNDLINE="yes"
          fi
          if echo "$LINE" | grep -E 'net_(addr|iface|route)_' > /dev/nul; then
            echo -e "\033[1;32m$LINE\033[0m"
          elif echo "$LINE" | grep -E 'TUN/TAP' > /dev/nul; then
            echo -e "\033[1;32m$LINE\033[0m"
          elif echo "$LINE" | grep -E '/sbin/(ifconfig|route add)' > /dev/nul; then
            echo -e "\033[1;32m$LINE\033[0m"
          elif echo "$LINE" | grep ' OK' > /dev/nul; then
            echo -e "\033[32m$LINE\033[0m"
          elif echo "$LINE" | grep 'Initialization Sequence Completed' > /dev/nul; then
            echo -e "\033[1;32m$LINE\033[0m"
          elif echo "$LINE" | grep -E '(WARNING|NOTE|DEPRECATED)' > /dev/nul; then
            echo -e "\033[33m$LINE\033[0m"
          elif echo "$LINE" | grep -E '(AUTH_FAILED|timed out|Restart pause)' > /dev/nul; then
            echo -e "\033[1;31m$LINE\033[0m"
          else
            echo -e "\033[94m$LINE\033[0m"
          fi
          if [ "$FOUNDLINE" == "yes" ] && [ "$LINE" != "$LASTLOGLINE" ]; then
            if echo "$LINE" | grep 'AUTH_FAILED' > /dev/nul; then
              AUTHFAILED="yes"
              RUNNINGPERIOD=$CONNECTTIMEOUT
              break 2
            fi
            if echo "$LINE" | grep -E '(timed out|Restart pause)' > /dev/nul; then
              RUNNINGPERIOD=$CONNECTTIMEOUT
              break 2
            fi
          fi
        done < $VPNLOG
      fi
      OPENVPNLOG_OLD=$OPENVPNLOG_NEW
      LASTLOGLINE=`tail -n1 $VPNLOG`
      NEWIP=$OLDIP
      VPNROUTE=`route -n | grep $VPNINTERFACE`
      if [ "$VPNROUTE" != "" ]; then

        # flush DNS and get new public IPv4
        stopservice dnsmasq
        startservice dnsmasq
        sleep 5
        NEWIP=`wget -t 5 -T 10 -q -O - $IPADDRESSURL`
        if [ $? -ne 0 ]; then
          
          echo -e "\033[1;31mIP address lookup failed.\033[0m"
        fi
      fi
    fi
    NOW=`date +%s`
    RUNNINGPERIOD=`expr $NOW - $STARTSTAMP`
  done

  # echo new IPv4, city and country
  if [ "$NEWIP" == "$OLDIP" ]; then
    echo -e "\033[1;31mIPv4 hasn't changed ($OLDIP).\033[0m"
    VPNROUTE=`route -n | grep $VPNINTERFACE`
    if [ "$VPNROUTE" == "" ]; then

      # log dead server
      NOWSTAMP=`date "+%Y-%m-%d %H:%M:%S"`
      echo $NOWSTAMP $PARAM1 >> $DEADLOGFILE
      echo -e "\033[1;31mConnecting to exit node $PARAM1 has failed.\033[0m"
      echo
      echo

      # prevent another AUTH_FAILED
      if [ "$AUTHFAILED" == "yes" ]; then
        AUTHFAILED="no"
        RND=`awk -v min=0 -v max=$MAXWAITAFTERAUTHFAILED 'BEGIN{srand(); print int(min+rand()*(max-min+1))}'`
        let SLEEPDURATION=$(($AUTHFAILEDWAIT + $RND))
        echo -e "Waiting for \033[1;37m$SLEEPDURATION\033[0m seconds to prevent another authentication failure:"
        for i in `seq $SLEEPDURATION`
        do
          sleep 1
          if [ $(($i%10)) == 0 ]; then
            printf ". "
            if [ $i -lt 100 ]; then
              printf " "
            fi
            echo $i seconds so far
          else
            printf "."
          fi
        done
        echo
        echo
      fi

    fi
  else
    echo
    echo Current server is $PARAM1.
    echo $PARAM1 > $CURRENTSERVERFILE
    
    # display current public IPv4
    if [ "$NEWIP" == "" ]; then
      echo -e "\033[1;31mNew public IPv4 couldn't be determined.\033[0m"
    else
      echo -e "\033[1;32mNew public IPv4 is $NEWIP.\033[0m"
    fi
    
    if [ "$CURLSUPPORTED" == "yes" ]; then
      CITY=$(curl --connect-timeout 3 -ks $IPINFOURL/city)
    else
      CITY=`wget -t 3 -T 10 -q -O - $IPINFOURL/city`
    fi
    if [ "$CITY" == "" ]; then
      CITY="an unknown city"
    fi
    if [ "$CURLSUPPORTED" == "yes" ]; then
      REGION=$(curl --connect-timeout 3 -ks $IPINFOURL/region)
    else
      REGION=`wget -t 3 -T 10 -q -O - $IPINFOURL/region`
    fi
    if [ "$REGION" == "" ]; then
      REGION="an unknown region"
    fi
    if [ "$CURLSUPPORTED" == "yes" ]; then
      ISP=$(curl --connect-timeout 3 -ks $IPINFOURL/org)
    else
      ISP=`wget -t 3 -T 10 -q -O - $IPINFOURL/org`
    fi
    if [ "$ISP" == "" ]; then
      ISP="unknown"
    fi
    if [ "$CURLSUPPORTED" == "yes" ]; then
      COUNTRYCODE=$(curl --connect-timeout 3 -ks $IPINFOURL/country)
    else
      COUNTRYCODE=`wget -t 3 -T 10 -q -O - $IPINFOURL/country`
    fi
    if [ "$COUNTRYCODE" == "" ]; then
      COUNTRYCODE="${PARAM1:0:2}"
    fi
    COUNTRYCODE=`echo "$COUNTRYCODE" | awk '{print toupper($0)}'`
    echo $COUNTRYCODE > $CURRENTCOUNTRYFILE
    if [ "$COUNTRYCODE" == "" ]; then
      COUNTRY="country unknown"
    else
      if [ ! -f "$JFFSPATH/$COUNTRIESJSON" ] || [ $(find "$JFFSPATH/$COUNTRIESJSON" -mtime +14 -print) ]; then
        echo Refreshing $COUNTRIESJSON.
        wget -q $COUNTRYNAMESJSONURL -P $JFFSPATH -O $COUNTRIESJSON
      fi
      COUNTRY=`cat $JFFSPATH/$COUNTRIESJSON | grep -E -o "\"$COUNTRYCODE\": \"[^\\"]{3,}\"" | grep -E -o '[^\"]{3,}'`
    fi

    # check if country of VPN exit node is disallowed by configuation
    COUNTRYOK="yes"
    for i in $EXCLUDECOUNTRIES
    do
      if [ -z "${COUNTRYCODE##*$i*}" ]; then
        echo -e "\033[1;31mThe country \"$COUNTRY\" ($COUNTRYCODE) is disallowed by configuration.\033[0m"
        COUNTRYOK="no"
      fi
    done

    if [ "$COUNTRYOK" == "yes" ]; then
      echo -e "New geolocation is $CITY in \033[1;37m$REGION district, $COUNTRY\033[0m."
      echo -e "The exit node's service provider is $ISP."
      echo
      RETRIESDONE=$MAXTRIES
      $SPEEDTESTSCRIPT $1
      if [ -f $VPNLOCKFILE ]; then
        rm -f $VPNLOCKFILE
      fi
      exit
    fi
  fi
  let RETRIESDONE=$RETRIESDONE+1
done

sleep $REBOOTWAIT
if [ -f $LTRFILE ]; then
  rm -f $LTRFILE
fi
NOWSTAMP=`date +%s`
echo $NOWSTAMP >> $LTRFILE
echo Rebooting router.
reboot