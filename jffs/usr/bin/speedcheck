#!/bin/sh

########################################################################
#                                                                      #
#   Speed check v9.01                                                  #
#   (c) by Tobse (cthullu@protonmail.com) in 2017                      #
#                                                                      #
#   This script must be located on an external storage, mounted on     #
#   /jffs and expects the presence of /jffs/usr/bin/vpn. All scripts   #
#   must be "chmod ugo+x" in order to be executable. You might wanna   #
#   call it by cron similar to that (the "root" in the following       #
#   line is necessary in many DD-WRT releases):                        #
#   */15 * * * * root /jffs/usr/bin/speedtest 2>&1                     #
#                                                                      #
########################################################################

# show header
DIRNAME="$( cd "$( dirname "$0" )" && pwd )"
HEADER=`awk 'NR==5{ print; }' $DIRNAME/$(basename "$0") | tr "#" " " | xargs`
echo
echo -e "\033[1;37m=====[ $HEADER ]=====\033[0m"
echo

# load config
source $DIRNAME/config
if [ -f "$DIRNAME/myconfig" ]; then
  echo -e "\033[1;36mApplying personal config override.\033[0m"
  source $DIRNAME/myconfig
else
  echo -e "\033[33mWARNING: no personal configuration file (myconfig) found.\033[0m"
fi

# get a random speed server for the current country
get_random_speedserver () {
  SPEEDSERVER=""
  CNT=0
  while [ $CNT -le 100 ] && [ "$SPEEDSERVER" == "" ]
  do

    # get speed test servers for current country
    SPEEDSERVERS=$(cat $XMLFILE | awk 'gsub(/ /, "___")')

    # count amount of speed servers in this country
    AMT=0
    for SPEEDSERVER in $SPEEDSERVERS ; do
      let AMT=$AMT+1
    done

    # generate random number
    # between 1 and amount of server directories
    RND=`awk -v min=1 -v max=$AMT 'BEGIN{srand(); print int(min+rand()*(max-min+1))}'`

    # now pick random server from current country's speed servers
    CNT2=0
    for SPEEDSERVER in $SPEEDSERVERS ; do
      let CNT2=$CNT2+1
      if [ $CNT2 -eq $RND ]; then
        URL=`echo $SPEEDSERVER | grep -E -o 'url="[^"]+?"' | sed 's|url="||g' | sed 's|/upload\.[^"]*"||gI'`
      fi
    done
    SPEEDSERVER=`echo $URL | sed 's|http://||gI' | sed 's|/.*$||g'`
    if [ "$SPEEDSERVER" != "https:" ]; then
      let CNT=$CNT+1
    fi
  done
  if [ "$SPEEDSERVER" == "https:" ]; then
    SPEEDSERVER=""
  fi
}

# log script call
if [ "$LOGGING" == "yes" ]; then
  NOWSTAMP=`date "+%Y-%m-%d %H:%M:%S"`
  echo $NOWSTAMP speedcheck script called >> $GENERALLOG
fi

# create temporary directory if it doesn't exist yet
if [ ! -d "$MYTMPDIR" ]; then
  mkdir $MYTMPDIR
fi

# check file system for faulty flip to read-only mode
echo Checking $JFFSPATH mount on write access.
touch $MYTMPDIR/writetest.lock >/dev/null 2>/dev/null
if [ -f "$MYTMPDIR/writetest.lock" ]; then
  rm -f $MYTMPDIR/writetest.lock
  echo -e "\033[1;32mWrite access to external storage is given.\033[0m"
else

  # reboot if last reboot was more than ... seconds ago
  BOOTDIFF=`expr $MINREBOOTPERIOD + 777`
  if [ -f $LTRFILE ]; then
    LASTBOOTED=`cat $LTRFILE`
    BOOTDIFF=`expr $NOWSTAMP - $LASTBOOTED`
  fi
  if [ "$BOOTDIFF" -ge "$MINREBOOTPERIOD" ]; then
    echo -e "\033[1;31mNo write access to external storage. Reboot initiated.\033[0m"
    sleep $REBOOTWAIT
    if [ -f $LTRFILE ]; then
      rm -f $LTRFILE
    fi
    echo $NOWSTAMP >> $LTRFILE
    reboot
  fi
fi

# get fastest measured speed ever
if [ ! -f "$JFFSPATH/$FASTEDSPEEDFILE" ]; then
  echo 1 > $JFFSPATH/$FASTEDSPEEDFILE
fi
FASTESTSPEED=`cat $JFFSPATH/$FASTEDSPEEDFILE`
ORIGFASTESTSPEED=$FASTESTSPEED

# define file sizes for speed test pixels
SIZE500=505544
SIZE1000=1986284
SIZE2000=4468241
SIZE2500=12407926
SIZE3000=17816816
SIZE3500=24262167
SIZE4000=31625365
SIZE5000=49454450
SIZE6000=71154024
SIZE7000=96912784

# kill all vpn connection scripts
for pid in $(ps | awk '/\/vpn/' | head -n-1 | awk '{print $1}'); do kill -9 $pid >/dev/null 2>&1; done

# check if we're connected to the WAN
if [ "$1" == "checkonly" ]; then
  sh $CCSCRIPT checkonly
else
  sh $CCSCRIPT
fi

# check if we're connected to the VPN
VPNROUTE=`route -n | grep $VPNINTERFACE`
if [ ! -z "$VPNROUTE" ]; then

  # reboot if timestamp already exists and
  # last reboot was more than ... seconds ago
  NOWSTAMP=`date +%s`
  if [ -f $STSFILE ]; then
    LASTSTART=`cat $STSFILE`
    LSPTAGO=`expr $NOWSTAMP - $LASTSTART`
    echo -e "\033[1;31mLast speed check started $LSPTAGO seconds ago and is still running.\033[0m"
    BOOTDIFF=`expr $MINREBOOTPERIOD + 777`
    if [ -f $LTRFILE ]; then
      LASTBOOTED=`cat $LTRFILE`
      BOOTDIFF=`expr $NOWSTAMP - $LASTBOOTED`
    fi
    if [ "$BOOTDIFF" -ge "$MINREBOOTPERIOD" ]; then
      sleep $REBOOTWAIT
      if [ -f $LTRFILE ]; then
        rm -f $LTRFILE
      fi
      echo $NOWSTAMP >> $LTRFILE
      reboot
    fi
  fi
  echo $NOWSTAMP >> $STSFILE

  # get current country
  CURRENTCOUNTRYCODE=`cat $CURRENTCOUNTRYFILE`

  if [ "$1" == "checkonly" ]; then
    echo Just checking...
  fi

  # initialize varaiables for average speed calculation
  TOTALSPEED=0
  MEASUREMENTS=0
  MAXSIZE=99999

  # if current country is unknown test against default speed test server
  if [ "$CURRENTCOUNTRYCODE" == "" ]; then
    URL=$DEFAULTSPEEDTESTURL
    SPEEDSERVER=`echo $URL | sed 's|http://||gI' | sed 's|/.*$||g'`

  # otherwise execute much more performant
  # and precise country based test
  else

    # update speedtest servers XML file
    echo Updating speedtest servers list to get nearby testing servers.
    curl -m 120 -o $XMLFILE -ks $STXMLURL

    SPEEDSERVER=""
    get_random_speedserver
  fi

  if [ "$SPEEDSERVER" == "" ]; then
    URL=$DEFAULTSPEEDTESTURL
    SPEEDSERVER=`echo $URL | sed 's|http://||gI' | sed 's|/.*$||g'`
  fi

  FACTOR=500
  FILESIZE=$SIZE500
  echo -e "Testing against \033[1;37m$SPEEDSERVER\033[0m."

  for i in `seq 10`
  do
    echo
    echo Downloading a ${FACTOR}x${FACTOR} pixels random image to measure the download speed.

    # download a random image to measure the time it took
    TIMEOUT=10
    RESULT=`time curl -ks -o /dev/null -m $TIMEOUT $URL/random${FACTOR}x${FACTOR}.jpg 2>&1`

    # do string acrobatics to calculate connection speed...
    MEASUREDSPEED=""
    REALTIME=`echo $RESULT | grep -E -o 'real +?[0-9\.]+?m +?[0-9\.]+?s'`
    MINUTES=`echo $REALTIME | grep -E -o '[0-9\.]+?m' | grep -E -o '[0-9\.]+?'`
    SECONDS=`echo $REALTIME | grep -E -o '[0-9\.]+?s' | grep -E -o '[0-9\.]+?'`
    TOTALSECONDS=$(awk "BEGIN {printf \"%.2f\",${MINUTES}*60+${SECONDS}}")
    TOOSLOW=1
    if awk "BEGIN {exit !("$TOTALSECONDS" > 0)}"; then
      MEASUREDSPEED=$(awk "BEGIN {printf \"%.2f\",${FILESIZE}/${TOTALSECONDS}/1024/1024*8}")
      if [ $i -gt 6 ]; then
        TOTALSPEED=$(awk "BEGIN {print $TOTALSPEED + $MEASUREDSPEED}")
      fi
      let MEASUREMENTS=$MEASUREMENTS+1
      COMPARISON=`echo | awk -v ms=$MEASUREDSPEED -v ma=$MINIMUMSPEED '{if (ms>ma) printf ("greater"); else printf ("smaller");}'`
      if [ "$COMPARISON" == "greater" ]; then
        echo -e "\033[1;32mDownload speed #$i was $MEASUREDSPEED Mbit/s (> MINIMUMSPEED of $MINIMUMSPEED Mbit/s).\033[0m"
      else
        echo -e "\033[1;31mDownload speed #$i was $MEASUREDSPEED Mbit/s (< MINIMUMSPEED of $MINIMUMSPEED Mbit/s).\033[0m"
      fi
      TOOSLOW=0
    fi

    # check if speed is realistic
    COMPARISON=`echo | awk -v ms=$MEASUREDSPEED -v ma=$UNLIKELYSPEED '{if (ms>ma) printf ("greater"); else printf ("smaller");}'`
    if [ "$COMPARISON" == "greater" ]; then
      echo -e "\033[1;31mMeasured speed seems unlikely ($MEASUREDSPEED Mbit/s > UNLIKELYSPEED of $UNLIKELYSPEED Mbit/s).\033[0m"
      SPEEDSERVER=""
      get_random_speedserver
      sleep 3
      i=0
      continue
    fi
    MAXALLOWED=`echo $ORIGFASTESTSPEED $SPEEDMULTIPLIER | awk '{print $1 * $2}'`
    COMPARISON=`echo | awk -v ms=$MEASUREDSPEED -v ma=$MAXALLOWED '{if (ms>ma) printf ("greater"); else printf ("smaller");}'`
    if [ "$COMPARISON" == "greater" ]; then
      echo -e "\033[1;31mMeasured speed of $MEASUREDSPEED Mbit/s seems unrealistic, compared to previus maximum of $ORIGFASTESTSPEED Mbit/s.\033[0m"
      SPEEDSERVER=""
      get_random_speedserver
      sleep 3
      i=0
      continue
    fi

    # update maximum speed measured ever if necessary
    COMPARISON=`echo | awk -v ms=$MEASUREDSPEED -v fs=$FASTESTSPEED '{if (ms>fs) printf ("greater"); else printf ("smaller");}'`
    if [ "$COMPARISON" == "greater" ]; then
      echo $MEASUREDSPEED > $JFFSPATH/$FASTEDSPEEDFILE
      FASTESTSPEED=$MEASUREDSPEED
    fi

    # dynamic up- or downscaling of download size
    COMPARISON=`echo | awk -v ts=$TOTALSECONDS -v ma=5 '{if (ts>ma) printf ("greater"); else printf ("smaller");}'`
    if [ $FACTOR == 500 ]; then
      if [ "$COMPARISON" == "smaller" ]; then
        if [ $FACTOR -lt $MAXSIZE ]; then
          FACTOR=1000
          FILESIZE=$SIZE1000
        fi
      fi
    elif [ $FACTOR == 1000 ]; then
      if [ "$COMPARISON" == "smaller" ]; then
        if [ $FACTOR -lt $MAXSIZE ]; then
          FACTOR=2000
          FILESIZE=$SIZE2000
        fi
      else
        FACTOR=500
        FILESIZE=$SIZE500
        MAXSIZE=$FACTOR
      fi
    elif [ $FACTOR == 2000 ]; then
      if [ "$COMPARISON" == "smaller" ]; then
        if [ $FACTOR -lt $MAXSIZE ]; then
          FACTOR=2500
          FILESIZE=$SIZE2500
        fi
      else
        FACTOR=1000
        FILESIZE=$SIZE1000
        MAXSIZE=$FACTOR
      fi
    elif [ $FACTOR == 2500 ]; then
      if [ "$COMPARISON" == "smaller" ]; then
        if [ $FACTOR -lt $MAXSIZE ]; then
          FACTOR=3000
          FILESIZE=$SIZE3000
        fi
      else
        FACTOR=2000
        FILESIZE=$SIZE2000
        MAXSIZE=$FACTOR
      fi
    elif [ $FACTOR == 3000 ]; then
      if [ "$COMPARISON" == "smaller" ]; then
        if [ $FACTOR -lt $MAXSIZE ]; then
          FACTOR=3500
          FILESIZE=$SIZE3500
        fi
      else
        FACTOR=2500
        FILESIZE=$SIZE2500
        MAXSIZE=$FACTOR
      fi
    elif [ $FACTOR == 3500 ]; then
      if [ "$COMPARISON" == "smaller" ]; then
        if [ $FACTOR -lt $MAXSIZE ]; then
          FACTOR=4000
          FILESIZE=$SIZE4000
        fi
      else
        FACTOR=3000
        FILESIZE=$SIZE3000
        MAXSIZE=$FACTOR
      fi
    elif [ $FACTOR == 4000 ]; then
      if [ "$COMPARISON" == "smaller" ]; then
        if [ $FACTOR -lt $MAXSIZE ]; then
          FACTOR=5000
          FILESIZE=$SIZE5000
        fi
      else
        FACTOR=3500
        FILESIZE=$SIZE3500
        MAXSIZE=$FACTOR
      fi
    elif [ $FACTOR == 5000 ]; then
      if [ "$COMPARISON" == "smaller" ]; then
        if [ $FACTOR -lt $MAXSIZE ]; then
          FACTOR=6000
          FILESIZE=$SIZE6000
        fi
      else
        FACTOR=4000
        FILESIZE=$SIZE4000
        MAXSIZE=$FACTOR
      fi
    elif [ $FACTOR == 6000 ]; then
      if [ "$COMPARISON" == "smaller" ]; then
        if [ $FACTOR -lt $MAXSIZE ]; then
          FACTOR=7000
          FILESIZE=$SIZE7000
        fi
      else
        FACTOR=5000
        FILESIZE=$SIZE5000
        MAXSIZE=$FACTOR
      fi
    fi

    # stop checking if timeout was exceeded
    MAXTSECONDS=
    COMPARISON=`echo | awk -v me=$TOTALSECONDS -v mi=9 '{if (me>mi) printf ("greater"); else printf ("smaller");}'`
    if [ "$COMPARISON" == "greater" ] && [ $i -gt 3 ]; then
      TOOSLOW=1
      break
    fi
  done

  # delete start time file
  if [ -f $STSFILE ]; then
    rm -f $STSFILE
  fi

  echo
  if [ "$MEASUREDSPEED" == "" ]; then
    echo -e "\033[1;31mCouldn't measure speed. Maybe the test server blocks VPNs.\033[0m"
    if [ -f $STSFILE ]; then
      rm -f $STSFILE
    fi
    return 1
  else

    AVERAGESPEED=$(awk "BEGIN {printf \"%.2f\",${TOTALSPEED}/4}")
    if [ "$TOOSLOW" -eq 0 ]; then
      echo -e "\033[1;96mThe last four measurements equal an average speed of $AVERAGESPEED Mbit/s.\033[0m"

      # prepare logging
      CURRENTSERVER=`cat $CURRENTSERVERFILE`
      NOWSTAMP=`date "+%Y-%m-%d %H:%M:%S"`

      # exit script if measured speed > minimum speed
      COMPARISON=`echo | awk -v me=$AVERAGESPEED -v mi=$MINIMUMSPEED '{if (me>mi) printf ("greater"); else printf ("smaller");}'`
      if [ "$COMPARISON" == "greater" ]; then
        # log good speed to file
        echo $NOWSTAMP $CURRENTSERVER: $AVERAGESPEED Mbit/s >> $GOODLOGFILE
        echo -e "\033[1;32mThat's faster than the desired MINIMUMSPEED of $MINIMUMSPEED Mbit/s.\033[0m"
        if [ -f $STSFILE ]; then
          rm -f $STSFILE
        fi
        if [ -f $VPNLOCKFILE ]; then
          rm -f $VPNLOCKFILE
        fi

        # check if system supports curl command
        CURLSUPPORTED=yes
        RESULT=`command -v curl`
        if [ "$RESULT" == "" ]; then
          CURLSUPPORTED=no
        fi

        # determine country of VPN server
        if [ "$CURLSUPPORTED" == "yes" ]; then
          COUNTRYCODE=$(curl --connect-timeout 3 -ks $IPINFOURL/country)
        else
          COUNTRYCODE=`wget -t 3 -T 10 -q -O - $IPINFOURL/country`
        fi
        if [ "$COUNTRYCODE" == "" ]; then
          COUNTRYCODE="${PARAM1:0:2}"
        fi
        COUNTRYCODE=`echo "$COUNTRYCODE" | awk '{print toupper($0)}'`
        if [ "$COUNTRYCODE" == "" ]; then
          COUNTRY="unknown"
        else
          COUNTRY=`cat $JFFSPATH/$COUNTRIESJSON | grep -E -o "\"$COUNTRYCODE\": \"[^\\"]{3,}\"" | grep -E -o '[^\"]{3,}'`
        fi
        echo -e "Country of VPN server is \033[1;37m$COUNTRY\033[0m."
        echo
        return
      fi
    fi

    # log miserable speed to file
    echo -e "\033[1;31mThe average measured speed was too low: $AVERAGESPEED < MINIMUMSPEED of $MINIMUMSPEED Mbit/s.\033[0m"
    if [ -f $CURRENTSERVERFILE ]; then
      echo $NOWSTAMP $CURRENTSERVER: $AVERAGESPEED Mbit/s >> $BADLOGFILE
    fi
  fi
fi

if [ "$1" == "checkonly" ]; then
  if [ -f $STSFILE ]; then
    rm -f $STSFILE
  fi
  return
fi

# speed check failed requirements, so (re)invoke vpn script
if [ -f $VPNLOCKFILE ]; then
  rm -f $VPNLOCKFILE
fi

if [ "$1" != "readonly" ]; then
  if [ "$1" != "" ]; then
    echo -e "\033[1;36mReinvoking VPN script with country \"$1\".\033[0m"
    $VPNSCRIPT $1
  else
    echo -e "\033[1;36mReinvoking VPN script with a random country.\033[0m"
    $VPNSCRIPT rnd
  fi
fi